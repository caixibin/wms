<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com._520it.wms.mapper.ProductStockMapper" >
  <resultMap id="BaseResultMap" type="com._520it.wms.domain.ProductStock" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="price" property="price" jdbcType="DECIMAL" />
    <result column="storeNumber" property="storeNumber" jdbcType="DECIMAL" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="incomeDate" property="incomeDate" jdbcType="TIMESTAMP" />
    <result column="outcomeDate" property="outcomeDate" jdbcType="TIMESTAMP" />
    <association property="depot" resultMap="com._520it.wms.mapper.DepotMapper.BaseResultMap" columnPrefix="d_"/>
    <association property="product" javaType="Product" >
      <id column="p_id" property="id"/>
      <result column="p_name" property="name"/>
      <result column="p_sn" property="sn"/>
      <result column="b_id" property="brand.id"/>
      <result column="b_name" property="brand.name"/>
    </association>
  </resultMap>
  <insert id="insert" parameterType="com._520it.wms.domain.ProductStock" useGeneratedKeys="true" keyProperty="id" >
    insert into `productstock` (price, storeNumber, amount, 
      incomeDate, outcomeDate, product_id, 
      depot_id)
    values (#{price,jdbcType=DECIMAL}, #{storeNumber,jdbcType=DECIMAL}, #{amount,jdbcType=DECIMAL}, 
      #{incomeDate,jdbcType=TIMESTAMP}, #{outcomeDate,jdbcType=TIMESTAMP}, #{product.id,jdbcType=BIGINT},
      #{depot.id,jdbcType=BIGINT})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com._520it.wms.domain.ProductStock" >
    update `productstock`
    set price = #{price,jdbcType=DECIMAL},
      storeNumber = #{storeNumber,jdbcType=DECIMAL},
      amount = #{amount,jdbcType=DECIMAL},
      incomeDate = #{incomeDate,jdbcType=TIMESTAMP},
      outcomeDate = #{outcomeDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByProductIdAndDepotId" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select stock.id, stock.price, stock.storeNumber, stock.amount, stock.incomeDate, stock.outcomeDate,
    stock.product_id, stock.depot_id,
    d.id d_id , d.name d_name,
    p.id p_id , p.name p_name
    from `productstock` stock
    JOIN depot d ON stock.depot_id = d.id
    JOIN product p ON stock.product_id = p.id
    where stock.product_id = #{productId} and stock.depot_id = #{depotId}
  </select>

  <sql id="base_select">
    ps.id, ps.price,ps.storeNumber,ps.amount,
    p.sn p_sn,p.name p_name,
    d.name d_name,
    b.name b_name
  </sql>
  <sql id="base_from">
    productstock ps
    JOIN product p ON ps.product_id = p.id
    JOIN depot d ON ps.depot_id = d.id
    JOIN brand b ON p.brand_id = b.id
  </sql>

  <sql id="base_where">
    <where>
      <if test="keyword != null and keyword != ''">
        AND (p.sn LIKE '%' #{keyword} '%' or p.name LIKE '%' #{keyword} '%')
      </if>
      <if test="depotId > 0">
        and d.depot_id  = #{depotId}
      </if>
      <if test="brandId > 0">
        and d.brand_id  = #{brandId}
      </if>
      <if test="limitNumber > 0">
        and ps.storeNumber  &lt;= #{limitNumber}
      </if>
    </where>
  </sql>

  <select id="queryForCount" resultType="java.lang.Integer">
    select count(ps.id)
    from <include refid="base_from"/>
    <include refid="base_where"/>
  </select>

  <select id="queryForList" resultMap="BaseResultMap">
    select <include refid="base_select"/>
    from <include refid="base_from"/>
    <include refid="base_where"/>
    <if test="pageSize>0">
    limit #{start} , #{pageSize}
    </if>
  </select>
</mapper>